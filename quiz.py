import json
import random
import os
import time
import threading
import sys
from datetime import datetime
import urllib.request
import urllib.error
import hashlib
import json
import os
from pathlib import Path
import shutil

# –§–∞–π–ª—ã
COURSES_DIR = "courses"
RESULTS_FILE = "results.txt"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞
EXAM_TIME = 3600          # 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥
EXAM_QUESTIONS = 45       # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —ç–∫–∑–∞–º–µ–Ω–µ
EXAM_PASS_SCORE = 34      # –ø–æ—Ä–æ–≥ —Å–¥–∞—á–∏

stop_timer = False
time_string = ""

# GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–≤–µ—Ç–∫–∞ main)
GITHUB_API = "https://api.github.com/repos/Ar4Balt/PT-SIEM-CS/contents/"
GITHUB_RAW = "https://raw.githubusercontent.com/Ar4Balt/PT-SIEM-CS/main/"

# —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
IGNORE_PATHS = {
    ".git", ".github",           # Git –∏ GitHub
    ".idea", ".vscode",          # IDE (PyCharm, VSCode)
    ".venv", "venv", "env",      # –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    "__pycache__", ".mypy_cache", ".pytest_cache",  # –∫—ç—à–∏
    ".DS_Store", "Thumbs.db",    # —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã (macOS, Windows)
    "results.txt"                # —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–¥–∞—á–∏
}

FILES_TO_CHECK = [
    "quiz.py",
    "README.md"
]

def md5(content: str) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç md5-—Ö—ç—à —Å—Ç—Ä–æ–∫–∏"""
    return hashlib.md5(content.encode("utf-8")).hexdigest()

def fetch_github_files(path=""):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ —Å GitHub API"""
    url = GITHUB_API + path
    try:
        with urllib.request.urlopen(url, timeout=5) as response:
            return json.loads(response.read().decode("utf-8"))
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ {path}: {e}")
        return []

def download_file(url, local_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å GitHub"""
    try:
        with urllib.request.urlopen(url, timeout=5) as response:
            data = response.read().decode("utf-8")
        Path(local_path).parent.mkdir(parents=True, exist_ok=True)
        with open(local_path, "w", encoding="utf-8") as f:
            f.write(data)
        print(f"‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª—ë–Ω: {local_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")

def check_and_update_file(file):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∏ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª, –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç"""
    url = GITHUB_RAW + file
    local_path = Path(file)

    try:
        with urllib.request.urlopen(url, timeout=5) as response:
            remote_content = response.read().decode("utf-8")
    except urllib.error.URLError:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ GitHub. –†–∞–±–æ—Ç–∞–µ–º –æ—Ñ–ª–∞–π–Ω.")
        return

    local_content = ""
    if local_path.exists():
        with open(local_path, "r", encoding="utf-8") as f:
            local_content = f.read()

    if md5(local_content) != md5(remote_content):
        download_file(url, local_path)
    else:
        print(f"‚úîÔ∏è –ê–∫—Ç—É–∞–ª–µ–Ω: {file}")

def update_courses():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ courses/"""
    try:
        with urllib.request.urlopen(GITHUB_API + "courses", timeout=5) as response:
            files = json.loads(response.read().decode("utf-8"))
    except urllib.error.URLError:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É—Ä—Å—ã. –†–∞–±–æ—Ç–∞–µ–º –æ—Ñ–ª–∞–π–Ω.")
        return

    for item in files:
        if item["type"] == "dir":
            # –∑–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä—å –ø–æ–¥–ø–∞–ø–æ–∫
            with urllib.request.urlopen(item["url"], timeout=5) as response:
                subfiles = json.loads(response.read().decode("utf-8"))
            for sf in subfiles:
                if sf["type"] == "file":
                    rel_path = f"courses/{Path(sf['path']).name}"
                    url = sf["download_url"]
                    local_path = Path(sf["path"])
                    try:
                        with urllib.request.urlopen(url, timeout=5) as r:
                            remote_content = r.read().decode("utf-8")
                        local_content = ""
                        if local_path.exists():
                            with open(local_path, "r", encoding="utf-8") as f:
                                local_content = f.read()
                        if md5(local_content) != md5(remote_content):
                            download_file(url, local_path)
                        else:
                            print(f"‚úîÔ∏è –ê–∫—Ç—É–∞–ª–µ–Ω: {local_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")

def sync_with_github(path=""):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å GitHub"""
    items = fetch_github_files(path)
    if not items:
        return

    remote_files = []
    for item in items:
        rel_path = os.path.join(path, item["name"])
        local_path = Path(rel_path)

        if item["type"] == "file":
            remote_files.append(str(local_path))
            try:
                with urllib.request.urlopen(item["download_url"], timeout=5) as r:
                    remote_content = r.read().decode("utf-8")
                local_content = ""
                if local_path.exists():
                    with open(local_path, "r", encoding="utf-8") as f:
                        local_content = f.read()
                if md5(local_content) != md5(remote_content):
                    download_file(item["download_url"], local_path)
                else:
                    print(f"‚úîÔ∏è –ê–∫—Ç—É–∞–ª–µ–Ω: {local_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {rel_path}: {e}")

        elif item["type"] == "dir":
            sync_with_github(rel_path)
            remote_files.append(str(local_path))

    # —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏
    local_dir = Path(path) if path else Path(".")
    if local_dir.exists():
        for child in local_dir.iterdir():
            if child.name in IGNORE_PATHS:  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏
                continue
            if str(child) not in remote_files:
                if child.is_file():
                    child.unlink()
                    print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –ª–∏—à–Ω–∏–π —Ñ–∞–π–ª: {child}")
                elif child.is_dir():
                    shutil.rmtree(child)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ª–∏—à–Ω—è—è –ø–∞–ø–∫–∞: {child}")

def check_updates():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")

    sync_with_github("")    # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å—ë —Å –∫–æ—Ä–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

    # –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    for file in FILES_TO_CHECK:
        check_and_update_file(file)

    # –∫—É—Ä—Å—ã
    update_courses()

def list_courses():
    """–°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É —Å –∫—É—Ä—Å–∞–º–∏"""
    if not os.path.exists(COURSES_DIR):
        print(f"‚ùå –ü–∞–ø–∫–∞ {COURSES_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return []
    return [d for d in os.listdir(COURSES_DIR) if os.path.isdir(os.path.join(COURSES_DIR, d))]

def choose_course():
    """–í—ã–±–æ—Ä –∫—É—Ä—Å–∞"""
    courses = list_courses()
    if not courses:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return None
    print("\nüìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:")
    for i, course in enumerate(courses, 1):
        print(f"{i}) {course}")
    while True:
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å: ").strip()
        if choice.isdigit() and 1 <= int(choice) <= len(courses):
            return courses[int(choice) - 1]
        print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def load_questions(course):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞"""
    file_path = os.path.join(COURSES_DIR, course, "questions.json")
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    with open(file_path, "r", encoding="utf-8") as f:
        return json.load(f)

def save_result(course, score, total, exam_mode, passed=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª"""
    with open(RESULTS_FILE, "a", encoding="utf-8") as f:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        mode = "–≠–∫–∑–∞–º–µ–Ω" if exam_mode else "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
        percent = (score / total * 100) if total > 0 else 0
        status = f" | –°–î–ê–ù ‚úÖ" if passed else (f" | –ù–ï –°–î–ê–ù ‚ùå" if exam_mode else "")
        f.write(f"{timestamp} | {course} | {mode} | {score}/{total} ({percent:.1f}%) {status}\n")

def format_time(seconds_left):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—É–Ω–¥ –≤ –ß–ß:–ú–ú:–°–°"""
    h = seconds_left // 3600
    m = (seconds_left % 3600) // 60
    s = seconds_left % 60
    return f"{h:02}:{m:02}:{s:02}"

def progress_bar(current, total, length=30):
    """–†–∏—Å—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    percent = current / total
    filled = int(length * percent)
    bar = "‚ñà" * filled + "-" * (length - filled)
    return f"[{bar}] {current}/{total}"

def timer_thread(start_time):
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    global stop_timer, time_string
    while not stop_timer:
        elapsed = int(time.time() - start_time)
        remaining = max(0, EXAM_TIME - elapsed)
        time_string = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {format_time(remaining)}"
        if remaining <= 0:
            break
        time.sleep(1)

def clear_screen():
    """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å"""
    os.system("cls" if os.name == "nt" else "clear")

def ask_question(q, current, total):
    """–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    clear_screen()
    print(time_string)
    print(f"\n–í–æ–ø—Ä–æ—Å {current}/{total}:")
    print(q['question'])
    for idx, option in enumerate(q['options']):
        print(f"   {idx}) {option}")

    answer = input("\n–í–∞—à –æ—Ç–≤–µ—Ç (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ): ").strip()
    try:
        user_choices = [int(x.strip()) for x in answer.split(",") if x.strip()]
    except ValueError:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –æ—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π.")
        return False

    if set(user_choices) == set(q['correct']):
        print("‚úÖ –í–µ—Ä–Ω–æ!")
        return True
    else:
        correct_answers = [q['options'][idx] for idx in q['correct']]
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {', '.join(correct_answers)}")
        return False

def training_mode(course, questions):
    """–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    queue = questions.copy()
    random.shuffle(queue)
    score = 0
    total = len(queue)
    answered = 0

    while queue:
        q = queue.pop(0)
        if ask_question(q, answered + 1, total):
            score += 1
        else:
            queue.append(q)
        answered += 1
        print("\n" + progress_bar(answered, total))
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    print("\n==== –ò—Ç–æ–≥ (–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞) ====")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {score} –∏–∑ {total}")
    save_result(course, score, total, exam_mode=False)

def exam_mode(course, questions):
    """–†–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞"""
    global stop_timer, time_string
    selected = random.sample(questions, min(EXAM_QUESTIONS, len(questions)))
    score = 0
    total = len(selected)

    start_time = time.time()
    stop_timer = False
    timer = threading.Thread(target=timer_thread, args=(start_time,), daemon=True)
    timer.start()

    for i, q in enumerate(selected, 1):
        elapsed = int(time.time() - start_time)
        if elapsed > EXAM_TIME:
            clear_screen()
            print("\n‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!")
            break

        if ask_question(q, i, total):
            score += 1

        print("\n" + progress_bar(i, total))
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    stop_timer = True
    timer.join()

    print("\n==== –ò—Ç–æ–≥ (–≠–∫–∑–∞–º–µ–Ω) ====")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {score} –∏–∑ {total}")
    percent = score / total * 100
    print(f"–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å: {percent:.1f}%")

    passed = score >= EXAM_PASS_SCORE
    if passed:
        print("üéâ –≠–∫–∑–∞–º–µ–Ω –°–î–ê–ù!")
    else:
        print("‚ùå –≠–∫–∑–∞–º–µ–Ω –ù–ï –°–î–ê–ù!")

    save_result(course, score, total, exam_mode=True, passed=passed)

if __name__ == "__main__":
    check_updates()
    course = choose_course()
    if not course:
        exit()

    questions = load_questions(course)
    if not questions:
        exit()

    print(f"\nüìò –¢—Ä–µ–Ω–∞–∂—ë—Ä –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {course}")
    mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1 - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, 2 - —ç–∫–∑–∞–º–µ–Ω): ").strip()

    if mode == "2":
        exam_mode(course, questions)
    else:
        training_mode(course, questions)
