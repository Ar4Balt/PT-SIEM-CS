import json
import random
import os
import time
from datetime import datetime

# –§–∞–π–ª—ã
QUESTIONS_FILE = "questions_full.json"
RESULTS_FILE = "results.txt"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞
EXAM_TIME = 3600          # 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥
EXAM_QUESTIONS = 45       # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —ç–∫–∑–∞–º–µ–Ω–µ
EXAM_PASS_SCORE = 38      # –ø–æ—Ä–æ–≥ —Å–¥–∞—á–∏

def load_questions(filename=QUESTIONS_FILE):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON"""
    if not os.path.exists(filename):
        print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []
    with open(filename, "r", encoding="utf-8") as f:
        return json.load(f)

def save_result(score, total, exam_mode, passed=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª"""
    with open(RESULTS_FILE, "a", encoding="utf-8") as f:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        mode = "–≠–∫–∑–∞–º–µ–Ω" if exam_mode else "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
        percent = (score / total * 100) if total > 0 else 0
        status = f" | –°–î–ê–ù ‚úÖ" if passed else (f" | –ù–ï –°–î–ê–ù ‚ùå" if exam_mode else "")
        f.write(f"{timestamp} | {mode} | {score}/{total} ({percent:.1f}%) {status}\n")

def ask_question(q):
    """–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False"""
    print(f"\n{q['question']}")
    for idx, option in enumerate(q['options']):
        print(f"   {idx}) {option}")

    answer = input("–í–∞—à –æ—Ç–≤–µ—Ç (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ): ").strip()
    try:
        user_choices = [int(x.strip()) for x in answer.split(",") if x.strip()]
    except ValueError:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –æ—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π.")
        return False

    if set(user_choices) == set(q['correct']):
        print("‚úÖ –í–µ—Ä–Ω–æ!")
        return True
    else:
        correct_answers = [q['options'][idx] for idx in q['correct']]
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {', '.join(correct_answers)}")
        return False

def training_mode(questions):
    """–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏. –û—à–∏–±–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è."""
    queue = questions.copy()
    random.shuffle(queue)
    score = 0
    total = len(queue)

    while queue:
        q = queue.pop(0)
        if ask_question(q):
            score += 1
        else:
            queue.append(q)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏

    print("\n==== –ò—Ç–æ–≥ (–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞) ====")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {score} –∏–∑ {total}")
    print("üéØ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    save_result(score, total, exam_mode=False)

def exam_mode(questions):
    """–†–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞ ‚Äî 45 –≤–æ–ø—Ä–æ—Å–æ–≤, 1 —á–∞—Å"""
    selected = random.sample(questions, min(EXAM_QUESTIONS, len(questions)))
    score = 0
    total = len(selected)

    start_time = time.time()
    for i, q in enumerate(selected, 1):
        if (time.time() - start_time) > EXAM_TIME:
            print("\n‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!")
            break

        print(f"\n–í–æ–ø—Ä–æ—Å {i}/{total}:")
        if ask_question(q):
            score += 1

    print("\n==== –ò—Ç–æ–≥ (–≠–∫–∑–∞–º–µ–Ω) ====")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {score} –∏–∑ {total}")
    percent = score / total * 100
    print(f"–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å: {percent:.1f}%")

    passed = score >= EXAM_PASS_SCORE
    if passed:
        print("üéâ –≠–∫–∑–∞–º–µ–Ω –°–î–ê–ù!")
    else:
        print("‚ùå –≠–∫–∑–∞–º–µ–Ω –ù–ï –°–î–ê–ù!")

    save_result(score, total, exam_mode=True, passed=passed)

if __name__ == "__main__":
    questions = load_questions()
    if not questions:
        exit()

    print("üìò –¢—Ä–µ–Ω–∞–∂—ë—Ä –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É PT-SIEM-CS")
    mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1 - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, 2 - —ç–∫–∑–∞–º–µ–Ω): ").strip()

    if mode == "2":
        exam_mode(questions)
    else:
        training_mode(questions)
